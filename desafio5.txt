#include <string.h>
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_log.h"
#include "HCF_IOTEC.h"
#include "HCF_LCD.h"
#include "HCF_ADC.h"
#include "HCF_MP.h"
#include "driver/adc.h"
#include "driver/gpio.h"

#define DEBOUNCE_DELAY 200
#define MAX_TENTATIVAS 3

static const char *TAG = "Sistema";
static uint8_t entradas, saidas = 0;
static char tecla = '-';
static char ultima_tecla = '-';
static uint32_t ultimo_tempo = 0;
char senha[5] = "1234";
char entrada_usuario[5] = "    ";
int posicao_digito = 0;
int acessos = 0;
int tentativas_erradas = 0;
bool sistema_bloqueado = false;
char escrever[40];

bool senha_correta = false;
int opcao = 0;
char grau_digito[4] = "";
int pos_grau = 0;

void limpar_digitacao() {
    memset(entrada_usuario, ' ', 5);
    posicao_digito = 0;
    escreve_lcd(1, 0, "Digite a senha: ");
    sprintf(escrever, "Acessos: %d", acessos);
    escreve_lcd(2, 0, escrever);
}

void bloquear_sistema() {
    sistema_bloqueado = true;
    limpar_lcd();
    escreve_lcd(1, 0, " SISTEMA");
    escreve_lcd(2, 0, " BLOQUEADO");
}

void config_adc() {
    adc1_config_width(ADC_WIDTH_BIT_12);
    adc1_config_channel_atten(ADC1_CHANNEL_0, ADC_ATTEN_DB_11);
}

void app_main(void) {
    escrever[39] = '\0';

    ESP_LOGI(TAG, "Iniciando sistema...");
    ESP_LOGI(TAG, "Versão do IDF: %s", esp_get_idf_version());

    iniciar_iotec();
    entradas = io_le_escreve(saidas);
    iniciar_lcd();
    config_adc();

    escreve_lcd(1, 0, "    Jornada 1   ");
    escreve_lcd(2, 0, " Programa Basico");

    vTaskDelay(1000 / portTICK_PERIOD_MS);
    limpar_lcd();
    limpar_digitacao();

    while (1) {
        tecla = le_teclado();

        if (sistema_bloqueado) {
            vTaskDelay(1000 / portTICK_PERIOD_MS);
            continue;
        }

        uint32_t tempo_atual = xTaskGetTickCount() * portTICK_PERIOD_MS;

        if (tecla == 'C' && (tecla != ultima_tecla || (tempo_atual - ultimo_tempo) > DEBOUNCE_DELAY)) {
            ultima_tecla = tecla;
            ultimo_tempo = tempo_atual;

            if (!senha_correta) {
                limpar_digitacao();
            } else {
                senha_correta = false;
                opcao = 0;
                pos_grau = 0;
                limpar_digitacao();
            }
            vTaskDelay(50 / portTICK_PERIOD_MS);
            continue;
        }

        if (!senha_correta) {
            if (tecla >= '0' && tecla <= '9' && posicao_digito < 4 &&
                (tecla != ultima_tecla || (tempo_atual - ultimo_tempo) > DEBOUNCE_DELAY)) {
                entrada_usuario[posicao_digito] = tecla;
                posicao_digito++;

                ultima_tecla = tecla;
                ultimo_tempo = tempo_atual;

                escreve_lcd(1, 0, "                ");
                for (int i = 0; i < posicao_digito; i++) {
                    escrever[i] = '*';
                }
                escrever[posicao_digito] = '\0';
                escreve_lcd(1, 0, escrever);

                vTaskDelay(50 / portTICK_PERIOD_MS);
            }
            else if (tecla == '=' && (tecla != ultima_tecla || (tempo_atual - ultimo_tempo) > DEBOUNCE_DELAY)) {
                ultima_tecla = tecla;
                ultimo_tempo = tempo_atual;

                if (posicao_digito == 4 && strncmp(entrada_usuario, senha, 4) == 0) {
                    acessos++;
                    tentativas_erradas = 0;
                    senha_correta = true;

                    escreve_lcd(1, 0, "1-Abrir  2-Fechar");
                    escreve_lcd(2, 0, "Escolha: ");
                } else {
                    tentativas_erradas++;
                    int tentativas_restantes = MAX_TENTATIVAS - tentativas_erradas;

                    escreve_lcd(1, 0, "Senha Incorreta!");
                    sprintf(escrever, "Tentativas: %d/3", tentativas_restantes);
                    escreve_lcd(2, 0, escrever);

                    if (tentativas_erradas >= MAX_TENTATIVAS) {
                        vTaskDelay(1000 / portTICK_PERIOD_MS);
                        bloquear_sistema();
                        continue;
                    }
                    vTaskDelay(1000 / portTICK_PERIOD_MS);
                    limpar_digitacao();
                }
            }
        }

        else if (senha_correta && opcao == 0) {
            if ((tecla == '1' || tecla == '2') &&
                (tecla != ultima_tecla || (tempo_atual - ultimo_tempo) > DEBOUNCE_DELAY)) {
                opcao = tecla - '0';
                ultima_tecla = tecla;
                ultimo_tempo = tempo_atual;

                escreve_lcd(1, 0, "Digite os Graus:");
                escreve_lcd(2, 0, "                ");
                memset(grau_digito, 0, sizeof(grau_digito));
                pos_grau = 0;

                vTaskDelay(200 / portTICK_PERIOD_MS);
            }
        }

        else if (senha_correta && opcao != 0) {
            if (tecla >= '0' && tecla <= '9' && pos_grau < 3 &&
                (tecla != ultima_tecla || (tempo_atual - ultimo_tempo) > DEBOUNCE_DELAY)) {
                grau_digito[pos_grau++] = tecla;
                grau_digito[pos_grau] = '\0';

                escreve_lcd(2, 0, grau_digito);

                ultima_tecla = tecla;
                ultimo_tempo = tempo_atual;
                vTaskDelay(50 / portTICK_PERIOD_MS);
            }
            else if (tecla == '=' && pos_grau > 0 &&
                     (tecla != ultima_tecla || (tempo_atual - ultimo_tempo) > DEBOUNCE_DELAY)) {
                ultima_tecla = tecla;
                ultimo_tempo = tempo_atual;

                int graus = atoi(grau_digito);

                // Se maior que 90, confirmação de segurança
                if (graus > 90) {
                    escreve_lcd(1, 0, "ALERTA: RISCO!");
                    escreve_lcd(2, 0, "1=OK  2=Cancel");
                    vTaskDelay(1000 / portTICK_PERIOD_MS);

                    char confirma = '-';
                    while (confirma != '1' && confirma != '2') {
                        confirma = le_teclado();
                        vTaskDelay(100 / portTICK_PERIOD_MS);
                    }

                    if (confirma == '2') {
                        escreve_lcd(1, 0, "Operacao Cancel");
                        escreve_lcd(2, 0, "Retornando...");
                        vTaskDelay(1500 / portTICK_PERIOD_MS);
                        senha_correta = false;
                        opcao = 0;
                        pos_grau = 0;
                        limpar_digitacao();
                        continue;
                    }
                }

                escreve_lcd(1, 0, "Movendo Motor...");
                escreve_lcd(2, 0, "                ");
                vTaskDelay(500 / portTICK_PERIOD_MS);

                rotacionar_driver(opcao == 1 ? 1 : 0, (float)graus, 0);
                vTaskDelay(2000 / portTICK_PERIOD_MS);

                senha_correta = false;
                opcao = 0;
                pos_grau = 0;
                limpar_digitacao();
            }
        }

        vTaskDelay(10 / portTICK_PERIOD_MS);
    }
}
